@page "/"
@using DakiShop.Logic
@using DakiShop.Models
@inject Blazored.LocalStorage.ILocalStorageService sessionL;
@inject Blazored.SessionStorage.ISessionStorageService sessionS;

@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject AppState AppState

<PageTitle>Store</PageTitle>

@*<input @bind-value="FilePath" type="file"/>
<a>@FilePath </a>*@
@*<NavLink href="/Dakimakura/1">
   <br> <button>Dakimakura</button> <br>
</NavLink>*@


<div class="site-holder">
    <div class="main-container">
        <div class="filters-container">
            <div class="search-field">
                <input class="input-field" maxlength="30" placeholder="Search" @bind-value="searchQuery" @bind-value:event="oninput" />
            </div>
            <div class="scroll-field">
                <span class="scroll-label">Max Price: @CurrentPrice ₴</span>
                <div>
                    <input type="range" id="myRange" class="price-range" name="points" min="0" step="@step" max=@max_price @bind="@CurrentPrice" @bind:event="oninput">
                </div>
            </div>

            <div class="category-field">
                <div class="select">
                    <select @bind="CategoryID" id="format">
                        <option value="0">All</option>
                        @foreach (var item in DBService.categories)
                        {
                            <option value=@item.ID>@item.Name</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="stretched">
    <div class="assortment-container">
        @if (DBService.dakimakuras.Count == 0
        || (!string.IsNullOrWhiteSpace(searchQuery) && DBService.dakimakuras.Where(x => x.Name.ToLower().Contains(searchQuery.ToLower())).ToList().Count == 0)
        || (!DBService.dakimakuras.Where(x => x.Category.ID == CategoryID).Any(x => x.Price <= CurrentPrice) && CategoryID != 0)
        || (!DBService.dakimakuras.Any(x => x.Category.ID == CategoryID) && CategoryID != 0)
        || (!DBService.dakimakuras.Any(x => x.Price <= CurrentPrice) && CategoryID == 0))
        {
            <div class="assortment-container-stretched">Sorry! Nothing has been found by your request!</div>
        }
        else
        {
            foreach (var item in string.IsNullOrWhiteSpace(searchQuery) ? DBService.dakimakuras : DBService.dakimakuras.Where(x => x.Name.ToLower().Contains(searchQuery.ToLower())))
            {
                @if (item.Price <= CurrentPrice && (item.Category.ID.Equals(CategoryID) || CategoryID == 0))
                {

                    <element @onclick="(() => RedirectToItem(item.ID))" class="card" style="justify-content:space-between; flex-direction:column; display:flex;">
                        <div>
                            <img class="card-img" src=@item.ImagePath>
                        </div>
                        <div>
                            <div class="card-title">@item.Name</div>

                            <div class="card-info">
                                <div style="width:70%;">
                                    <div class="card-price">@item.Price ₴</div>
                                </div>

                                <div style="width:30%; display:flex;">
                                    <svg class="card-rating-image" fill="orange" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.279-7.416-3.967-7.417 3.967 1.481-8.279-6.064-5.828 8.332-1.151z" /></svg>
                                    <div class="card-rating-score">@(item.Rating==0?"--":item.Rating)</div>
                                </div>
                            </div>
                        </div>
                    </element>

                }
            }
        }
    </div>
</div>




@code {
    string FilePath = string.Empty;
    string searchQuery = string.Empty;

    int max_price = 0;
    int step = 10;

    int _currentPrice = 0;
    private int CurrentPrice
    {
        get
        {
            return _currentPrice;
        }
        set
        {
            _currentPrice = value;
        }
    }

    private int _categoryID = 0;
    private int CategoryID
    {
        get
        {
            return _categoryID;
        }
        set
        {
            _categoryID = value;
            UpdatePriceScrollValues();
        }
    }


    public void RedirectToItem(int itemID)
    {
        NavManager.NavigateTo("/Dakimakura/" + itemID.ToString());
    }

    private async void UpdatePriceScrollValues()
    {
        max_price = DBService.GetMaxPriceInCategory(CategoryID);
        CurrentPrice = max_price;
        await JSRuntime.InvokeVoidAsync("updScroll");
        await JSRuntime.InvokeVoidAsync("setPriceScroll", max_price);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        max_price = DBService.GetMaxPriceInCategory(CategoryID);
        CurrentPrice = max_price;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setPriceScroll", max_price);
            StateHasChanged();
        }
    }
}