@page "/"
@using DakiShop.Logic
@using DakiShop.Models
@inject Blazored.LocalStorage.ILocalStorageService session;
@inject IJSRuntime JSRuntime

<PageTitle>Store</PageTitle>

@*<input @bind-value="FilePath" type="file"/>
<a>@FilePath </a>
<NavLink href="/Dakimakura/1">
   <br> <button>Dakimakura</button> <br>
</NavLink>
<br><br><br><br>
<label> Welcome, @UserName </label>
<br>
<button class="btn btn-success" @onclick="SaveSession"> LogIn </button>
<button class="btn btn-success" @onclick="ClearSession"> LogOut </button>*@

<div class="site-holder">
    <div class="main-container">
        <div class="filters-container">
            <div class="search-field">
                <input class="input-field" maxlength="30" placeholder="Search" @bind-value="searchQuery" @bind-value:event="oninput"/>
            </div>
            <div class="scroll-field">
                <span class="scroll-label" >Max Price: @current_price ₴</span>
                <input type="range" id="myRange" class="price-range" name="points" min="0" step="@step" max=@max_price @bind="@current_price" @bind:event="oninput">
            </div>
           
            <div class="category-field">
                <div class="select">
                    <select @bind="CategoryID" id="format">  
                    <option value="0">All</option>
                    @foreach (var item in DBService.categories)
                    {
                      <option value=@item.ID>@item.Name</option>   
                    }
                    </select>
                </div>
            </div>
        </div>
    </div>
</div>
               

<div class="stretched">
    <div class="assortment-container">
        @if (DBService.dakimakuras.Count == 0 
        || (!string.IsNullOrWhiteSpace(searchQuery) && DBService.dakimakuras.Where(x => x.Name.ToLower().Contains(searchQuery.ToLower())).ToList().Count == 0)
        ||(!DBService.dakimakuras.Where(x=>x.Category.ID == CategoryID).Any(x=>x.Price <=current_price)&&CategoryID!=0)
        ||(!DBService.dakimakuras.Any(x=>x.Category.ID ==CategoryID)&&CategoryID!=0))
        {
            <div class="assortment-container-stretched">Sorry! Nothing has been found by your request!</div>
        }
        else
        {
            foreach (var item in string.IsNullOrWhiteSpace(searchQuery) ? DBService.dakimakuras : DBService.dakimakuras.Where(x => x.Name.ToLower().Contains(searchQuery.ToLower())))
            {
                @if(item.Price<= current_price && (item.Category.ID.Equals(CategoryID)||CategoryID==0)) 
                {
                    <element @onclick="myScript" class="card">
                        <div>
                        <img class="card-img" src=@item.ImagePath>
                    </div>
                    <div>
                        <div class="card-title">@item.Name</div>
         
                        <div class="card-info">
                            <div class="card-price">@item.Price ₴</div>
                            <img class="card-rating-image" src="/css/resourses/star.png">
                            <div class="card-rating-score">@item.Rating</div>
                        </div>
                    </div>
                    </element>
                }
            }
        }
    </div>
</div>




@code{
    string searchQuery =string.Empty;


    int max_price = 0;
    int current_price = 0;
    int step = 10;

    private int _categoryID  = 0;
    private int CategoryID
    {
        get
        {
            return _categoryID;
        }
        set
        {
            _categoryID = value;
            UpdatePriceScrollValues();
            //run your process here to handle dropdown changes
        }
    }

    public void myScript()
    {

    }

    private async void UpdatePriceScrollValues()
    {
        max_price = DBService.GetMaxPriceInCategory(CategoryID);
        current_price = max_price;
        await JSRuntime.InvokeVoidAsync("setPriceScroll",max_price);  
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            UpdatePriceScrollValues();
            
            StateHasChanged();
        }
    }    
}