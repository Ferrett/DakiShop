@page "/authentication"
@using DakiShop.Logic
@using DakiShop.Models
@using RaportBlazorServer.Logic
@inject Blazored.LocalStorage.ILocalStorageService sessionL;
@inject Blazored.SessionStorage.ISessionStorageService sessionS;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject AppState AppState


<PageTitle>Auth</PageTitle>


<div class="user">
    <header class="user__header">
        <h1 class="user__title">@(isRegistration? "Registration" : "Log In Account")</h1>
    </header>
    
    <form class="form">
        <div class="form__group" style="background-color:red">
            <input type="text" @bind-value="login" placeholder="Username" class="form__input" />
        </div>
        @if (isRegistration) {
            <div class="form__group">
                <input type="email" @bind-value="email" placeholder="Email" class="form__input" />
            </div>
        }
        
        <div class="form__group">
            <input type="password" @bind-value="pass" placeholder="Password" class="form__input" />
        </div>

        @if (isRegistration) {
            <div class="form__group">
                <input type="password" @bind-value="passRepeat" placeholder="Repeat Password" class="form__input" />
            </div>
        }
        <button class="btnA" @onclick="RegisterNewUser" type="button">@(isRegistration? "Register" : "LogIn")</button>
       
    </form>
        <div class=@regStyle>
         <a >@registrationErrorText</a>
        </div>
    <form class="form">
        <button class="btnA" @onclick="ChangeLogIn" type="button">@(isRegistration? "Already have an account?" : "Do not have account yet?")</button>
    </form>

</div>

@code{
    bool isRegistration = false;
    string pass = string.Empty;
    string passRepeat = string.Empty;
    string login = string.Empty;
    string email = string.Empty;
    string registrationErrorText = string.Empty;

    string regStyle = "error-auth-text";
    private void ChangeLogIn()
    {
        isRegistration = !isRegistration;
        pass = string.Empty;
        passRepeat = string.Empty;
        login = string.Empty;
        email = string.Empty;
        registrationErrorText = string.Empty;
    }

    private bool UserValidation()
    {
        var responce = isRegistration ? Validation.ValidateRegistration(login, email, pass, passRepeat) : Validation.ValidateLogIn(login, pass);
        registrationErrorText = responce.Item2;
        regStyle = responce.Item1 ? "error-auth-text-nice" : "error-auth-text";
        if (!responce.Item1)
            return false;

        return true;
    }

    private void RegisterNewUser()
    {
        if (UserValidation())
        {
            if(isRegistration)
                DBService.AddNewUser(login, email, pass);

            SaveSession();
            NavManager.NavigateTo("/");
        }
    }

    public async void SaveSession()
    {
        await sessionL.SetItemAsync("name2",login);
        await sessionL.SetItemAsync("root2",DBService.GetCurrentUserRoot(login)==false?"false":"true");

        AppState.UserRoot = DBService.GetCurrentUserRoot(login);
        AppState.UserName = login;
        StateHasChanged();
    }
}